---
title: TCI implementation
author: "Jona JOACHIM"
date: "2025-08-19"
categories: [news, code, analysis]
#image: "c3588da9-9eed-48d1-b536-ab53e7d1ad7d.jpg"
# bibliography: ../202508_tci_01_idea/references.bib
draft: true
---

## Section
We try to stick closely to the STANPUMP implementation
This is a simple placeholder for the manuscript's main document [@knuth84].

```{python}
#| echo: false

import numpy as np
from numpy.polynomial import polynomial as P
```

These are the constants from the Gepts model for Sufentanil.
```{python}
# Linearity of Pharmacokinetics and Model Estimation of Sufentanil by Gepts et al.
# DOI: 10.1097/00000542-199512000-00010

Vc = 14.3    # L
k10 = 0.0645 # min⁻¹
k12 = 0.1086 # min⁻¹
k13 = 0.0229 # min⁻¹
k21 = 0.0245 # min⁻¹
k31 = 0.0013 # min⁻¹
ke0 = 0.112  # min⁻¹
```

Differential equations for the 3-compartment model PK system

$\frac{dA_1}{dt} = A_2 k_{21} + A_3 k_{31} - A_1(k_{10} + k_{12} + k_{13}) + \text{Infusion}$

$\frac{dA_2}{dt} = A_1 k_{12} - A_2 k_{21}$

$\frac{dA_3}{dt} = A_1 k_{13} - A_3 k_{31}$

$\frac{dC_e}{dt} = k_{e0}\left(\frac{A_1}{V_c} - C_e\right)$

The system matrix A for the PK system is

$\mathbf{A} = \begin{pmatrix}
-(k_{10} + k_{12} + k_{13}) & k_{21} & k_{31} \\
k_{12} & -k_{21} & 0 \\
k_{13} & 0 & -k_{31}
\end{pmatrix}$

We want to solve the system to obtain an equation of this form:

$$
C(t) = A_1 e^{-\lambda_1 t} + A_2 e^{-\lambda_2 t} + A_3 e^{-\lambda_3 t}
$$ {#eq-exponential}


First, we need to calculate the $\lambda$ values, which are the eigenvalues for the system.

Numpy does this or us:

```{python}
A = [
    [-(k10 + k12 + k13), k21, k31],
    [k12, -k21, 0],
    [k13, 0, -k31],
]
lambdas = -np.sort(np.linalg.eigvals(A))
lambdas = np.append(lambdas, ke0)

print(lambdas)
```

In 1990 for STANPUMP, the developers did not have powerful eigenvalues calculators. They needed to derive the eigenvalues manually.

To find the eigenvalues $\lambda$, it is required to solve: det($\lambda$I - A) = 0, I being the identity matrix.

$\lambda I - A = \begin{pmatrix}
\lambda + (k_{10} + k_{12} + k_{13}) & -k_{21} & -k_{31} \\
-k_{12} & \lambda + k_{21} & 0 \\
-k_{13} & 0 & \lambda + k_{31}
\end{pmatrix}$

which can be simplified to:

$\lambda³ + \lambda²(k10+k12+k13+k21+k31) + \lambda(k10×k31 + k21×k31 + k21×k13 + k10×k21 + k31×k12) + k10×k21×k31$

The coefficient $a^n$ for $\lambda^n$ are:

```
a0 = k10 * k21 * k31
a1 = k10 * k31 + k21 * k31 + k21 * k13 + k10 * k21 + k31 * k12
a2 = k10 + k12 + k13 + k21 + k31
```


Next we need to calculate the roots for these polynomials.
This involves solving a cubic polynomial.
In 1990, there probably weren't any open source off the shelf polynomial solvers available.
However the C standard mathematics library already had trigonometric functions.
They used Cardano's method with involving trigonometrics.

```C
a0 = k10 * k21 * k31;
a1 = k10 * k31 + k21 * k31 + k21 * k13 + k10 * k21 + k31 * k12;
a2 = k10 + k12 + k13 + k21 + k31;

/* now transform to x^3 + px + q = 0 (depressed cubic) */
p = a1 - (a2 * a2 / 3.0);
q = (2 * a2 * a2 * a2 / 27.0) - (a1 * a2 / 3.0) + a0;

r1 = sqrt(-(p * p * p) / 27.0);
phi = (-q / 2.0) / r1;
/* Clamp phi to valid range for acos */
if (phi > 1)
    phi = 1;
else if (phi < -1)
    phi = -1;
phi = (acos(phi) / 3.0);
r1 = 2.0 * exp(log(r1) / 3.0);

/* Calculate the three roots */
r[1] = -(cos(phi) * r1 - a2 / 3.0);
r[2] = -(cos(phi + 120.0 * toradian) * r1 - a2 / 3.0);
r[3] = -(cos(phi + 240.0 * toradian) * r1 - a2 / 3.0);
```

To take into account the infusion in @eq-exponential

$-I \frac{1-e^{-10s}}{s} - A_1(0) = -(k_1 + s)\hat{A}_1(s) + k_{21}\hat{A}_2(s) + k_{31}\hat{A}_3(s)$

$-A_i(0) = k_{1i}\hat{A}_1(s) - (k_{i1} + s)\hat{A}_i(s)$