{
  "hash": "b744e9d58eb6ccb5f09d36093999b119",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: TCI implementation\nauthor: \"Jona JOACHIM\"\ndate: \"2025-08-19\"\ncategories: [news, code, analysis]\nimage: \"c3588da9-9eed-48d1-b536-ab53e7d1ad7d.jpg\"\nbibliography: references.bib\ndraft: true\n---\n\n## Section\nWe try to stick closely to the STANPUMP implementation\nThis is a simple placeholder for the manuscript's main document [@knuth84].\n\n\n\nThese are the constants from the Gepts model for Sufentanil.\n\n::: {#f176d874 .cell execution_count=2}\n``` {.python .cell-code}\n# Linearity of Pharmacokinetics and Model Estimation of Sufentanil by Gepts et al.\n# DOI: 10.1097/00000542-199512000-00010\n\nVc = 14.3    # L\nk10 = 0.0645 # min⁻¹\nk12 = 0.1086 # min⁻¹\nk13 = 0.0229 # min⁻¹\nk21 = 0.0245 # min⁻¹\nk31 = 0.0013 # min⁻¹\nke0 = 0.112  # min⁻¹\n```\n:::\n\n\nDifferential equations for the 3-compartment model PK system\n\n$\\frac{dA_1}{dt} = A_2 k_{21} + A_3 k_{31} - A_1(k_{10} + k_{12} + k_{13}) + \\text{Infusion}$\n\n$\\frac{dA_2}{dt} = A_1 k_{12} - A_2 k_{21}$\n\n$\\frac{dA_3}{dt} = A_1 k_{13} - A_3 k_{31}$\n\n$\\frac{dC_e}{dt} = k_{e0}\\left(\\frac{A_1}{V_c} - C_e\\right)$\n\nThe system matrix A for the PK system is\n\n$\\mathbf{A} = \\begin{pmatrix}\n-(k_{10} + k_{12} + k_{13}) & k_{21} & k_{31} \\\\\nk_{12} & -k_{21} & 0 \\\\\nk_{13} & 0 & -k_{31}\n\\end{pmatrix}$\n\nWe want to solve the system to obtain an equation of this form:\n\n$$\nC(t) = A_1 e^{-\\lambda_1 t} + A_2 e^{-\\lambda_2 t} + A_3 e^{-\\lambda_3 t}\n$$ {#eq-exponential}\n\n\nFirst, we need to calculate the $\\lambda$ values, which are the eigenvalues for the system.\n\nNumpy does this or us:\n\n::: {#d5cc787a .cell execution_count=3}\n``` {.python .cell-code}\nA = [\n    [-(k10 + k12 + k13), k21, k31],\n    [k12, -k21, 0],\n    [k13, 0, -k31],\n]\nlambdas = -np.sort(np.linalg.eigvals(A))\nlambdas = np.append(lambdas, ke0)\n\nprint(lambdas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.21045095 0.01041148 0.00093757 0.112     ]\n```\n:::\n:::\n\n\nIn 1990 for STANPUMP, the developers did not have powerful eigenvalues calculators. They needed to derive the eigenvalues manually.\n\nTo find the eigenvalues $\\lambda$, it is required to solve: det($\\lambda$I - A) = 0, I being the identity matrix.\n\n$\\lambda I - A = \\begin{pmatrix}\n\\lambda + (k_{10} + k_{12} + k_{13}) & -k_{21} & -k_{31} \\\\\n-k_{12} & \\lambda + k_{21} & 0 \\\\\n-k_{13} & 0 & \\lambda + k_{31}\n\\end{pmatrix}$\n\nwhich can be simplified to:\n\n$\\lambda³ + \\lambda²(k10+k12+k13+k21+k31) + \\lambda(k10×k31 + k21×k31 + k21×k13 + k10×k21 + k31×k12) + k10×k21×k31$\n\nThe coefficient $a^n$ for $\\lambda^n$ are:\n\n```\na0 = k10 * k21 * k31\na1 = k10 * k31 + k21 * k31 + k21 * k13 + k10 * k21 + k31 * k12\na2 = k10 + k12 + k13 + k21 + k31\n```\n\n\nNext we need to calculate the roots for these polynomials.\nThis involves solving a cubic polynomial.\nIn 1990, there probably weren't any open source off the shelf polynomial solvers available.\nHowever the C standard mathematics library already had trigonometric functions.\nThey used Cardano's method with involving trigonometrics.\n\n```C\na0 = k10 * k21 * k31;\na1 = k10 * k31 + k21 * k31 + k21 * k13 + k10 * k21 + k31 * k12;\na2 = k10 + k12 + k13 + k21 + k31;\n\n/* now transform to x^3 + px + q = 0 (depressed cubic) */\np = a1 - (a2 * a2 / 3.0);\nq = (2 * a2 * a2 * a2 / 27.0) - (a1 * a2 / 3.0) + a0;\n\nr1 = sqrt(-(p * p * p) / 27.0);\nphi = (-q / 2.0) / r1;\n/* Clamp phi to valid range for acos */\nif (phi > 1)\n    phi = 1;\nelse if (phi < -1)\n    phi = -1;\nphi = (acos(phi) / 3.0);\nr1 = 2.0 * exp(log(r1) / 3.0);\n\n/* Calculate the three roots */\nr[1] = -(cos(phi) * r1 - a2 / 3.0);\nr[2] = -(cos(phi + 120.0 * toradian) * r1 - a2 / 3.0);\nr[3] = -(cos(phi + 240.0 * toradian) * r1 - a2 / 3.0);\n```\n\nTo take into account the infusion in @eq-exponential\n\n$-I \\frac{1-e^{-10s}}{s} - A_1(0) = -(k_1 + s)\\hat{A}_1(s) + k_{21}\\hat{A}_2(s) + k_{31}\\hat{A}_3(s)$\n\n$-A_i(0) = k_{1i}\\hat{A}_1(s) - (k_{i1} + s)\\hat{A}_i(s)$\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}