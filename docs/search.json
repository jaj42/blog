[
  {
    "objectID": "posts/202508_stanpump/index.html",
    "href": "posts/202508_stanpump/index.html",
    "title": "Deep dive into STANPUMP",
    "section": "",
    "text": "Target Controlled Infusion (TCI) is a technique that uses real-time algorithms to control drug infusions. The goal is to quickly and safely achieve the desired drug concentration in a patient’s blood or at the drug’s effect site, without overshooting the target. While TCI can be used beyond anesthesia, it has found its widest application in perioperative settings, where anesthesia-related drugs are infused to maintain stable sedation during total intravenous anesthesia (TIVA).\nTCI relies on pharmacometric models called PKPD models (pharmacokinetic-pharmacodynamic models). These models describe how drugs move through and are processed by the body (pharmacokinetics) and how they affect the body (pharmacodynamics). Although the effect is typically sedation level, this isn’t always the case.\nSince TCI’s first uses in the 1980s1, significant effort has been invested in developing new PKPD models. Today, these models are available for nearly every drug used in anesthesia. Extensive literature exists on PKPD models and their design, along with various software options for building and fitting these models. NONMEM is the best-known software, but many alternatives are available, including open-source options like nlmixr22.\nMost PKPD models for anesthesia are compartmental models with three compartments, where Cc typically represents the concentration of drug in the plasma. Additionally, Ce represents the concentration in the “effect compartment,” which drives the drug’s effect.\nHowever, implementing new models to give clinical insight requires integrating them into TCI systems. Currently, few TCI systems are available, and most are proprietary and closed-source. The algorithms used for TCI, which must inverse PKPD models, are not well documented. The only open-source TCI system I’m aware of is STANPUMP from the 1990s. In this blog post, I’ll take a deep dive into the STANPUMP source code to understand the underlying algorithms and explore implementing them in a modern way. My aim is to understand these algorithms and create a minimal open-source implementation as a foundation for future work."
  },
  {
    "objectID": "posts/202508_stanpump/index.html#pharmacometrics-tci-and-stanpump",
    "href": "posts/202508_stanpump/index.html#pharmacometrics-tci-and-stanpump",
    "title": "Deep dive into STANPUMP",
    "section": "",
    "text": "Target Controlled Infusion (TCI) is a technique that uses real-time algorithms to control drug infusions. The goal is to quickly and safely achieve the desired drug concentration in a patient’s blood or at the drug’s effect site, without overshooting the target. While TCI can be used beyond anesthesia, it has found its widest application in perioperative settings, where anesthesia-related drugs are infused to maintain stable sedation during total intravenous anesthesia (TIVA).\nTCI relies on pharmacometric models called PKPD models (pharmacokinetic-pharmacodynamic models). These models describe how drugs move through and are processed by the body (pharmacokinetics) and how they affect the body (pharmacodynamics). Although the effect is typically sedation level, this isn’t always the case.\nSince TCI’s first uses in the 1980s1, significant effort has been invested in developing new PKPD models. Today, these models are available for nearly every drug used in anesthesia. Extensive literature exists on PKPD models and their design, along with various software options for building and fitting these models. NONMEM is the best-known software, but many alternatives are available, including open-source options like nlmixr22.\nMost PKPD models for anesthesia are compartmental models with three compartments, where Cc typically represents the concentration of drug in the plasma. Additionally, Ce represents the concentration in the “effect compartment,” which drives the drug’s effect.\nHowever, implementing new models to give clinical insight requires integrating them into TCI systems. Currently, few TCI systems are available, and most are proprietary and closed-source. The algorithms used for TCI, which must inverse PKPD models, are not well documented. The only open-source TCI system I’m aware of is STANPUMP from the 1990s. In this blog post, I’ll take a deep dive into the STANPUMP source code to understand the underlying algorithms and explore implementing them in a modern way. My aim is to understand these algorithms and create a minimal open-source implementation as a foundation for future work."
  },
  {
    "objectID": "posts/202508_stanpump/index.html#mathematics",
    "href": "posts/202508_stanpump/index.html#mathematics",
    "title": "Deep dive into STANPUMP",
    "section": "Mathematics",
    "text": "Mathematics\nPKPD models can be described by a set of ordinary differential equations (ODE) with one equation per compartment. In anesthesia, most drugs follow a 3-compartment model with can be mathematically described as follows:\n\n\\[\n\\begin{equation}\n\\begin{aligned}\n\\frac{dA_1}{dt} & = A_2 k_{21} + A_3 k_{31} - A_1(k_{10} + k_{12} + k_{13}) + \\text{Infusion} \\\\\n\\frac{dA_2}{dt} & = A_1 k_{12} - A_2 k_{21} \\\\\n\\frac{dA_3}{dt} & = A_1 k_{13} - A_3 k_{31} \\\\\n\\frac{dC_e}{dt} & = k_{e0}\\left(\\frac{A_1}{V_c} - C_e\\right)\n\\end{aligned}\n\\end{equation}\n\\tag{1}\\]\n\\(A_n\\) is the amount of drug in compartment \\(n\\), \\(k_ij\\) is the rate constant which describes the speed with which the drug moves from compartement \\(i\\) to compartment \\(j\\). This is not Fick’s laws of diffusion because diffusion is driven by concentration, not by drug amount. It took me some time to understand that we are talking about the drug amount, not the concentration. This was difficult to understand especially since there is an exception for the effect site compartment \\(Ce\\) where the rate constant \\(k_{e0}\\) drives directly concentration. Once, the effect site compartment was treated as a regular compartment (with \\(k_14\\) and \\(k_41\\) rate constants). However, nowadays it is treated as a special compartment with zero volume and a single rate constant \\(k_{e0}\\) (= \\(k_{41}\\)) and \\(k_14\\) is zero. Since the volume is zero, no drug actually moves to the compartment and it is driven by concentration. The plasma concentration \\(Cc\\) is obtained by dividing the amount in the central compartment \\(A_1\\) by \\(Vc\\), the volume of the central compartment.\nIf we leave aside the infusion term for one moment, we can write the equations in matrix form as\n\\(\\frac{dA}{dt} = S \\cdot A^T\\)\nWhere \\(A\\) is the vector \\(\\begin{pmatrix} A_1 & A_2 & A_3 \\end{pmatrix}\\) and S is the system matrix.\n\\[\n\\mathbf{S} = \\begin{pmatrix}\n-(k_{10} + k_{12} + k_{13}) & k_{21} & k_{31} \\\\\nk_{12} & -k_{21} & 0 \\\\\nk_{13} & 0 & -k_{31}\n\\end{pmatrix}\n\\]\nThis expression can be integrated to obtain the following closed form expression:\n\\[\nCc(t) = B_1 e^{-\\lambda_1 t} + B_2 e^{-\\lambda_2 t} + B_3 e^{-\\lambda_3 t}\n\\tag{2}\\]\nIn this closed form solution, the \\(B\\) terms are called hybrid rate constants and the \\(\\lambda\\) terms are called exponential decay constants. You will also find it written as:\n\\[\nCc(t) = A e^{-\\alpha t} + B e^{-\\beta t} + C e^{-\\gamma t}\n\\]\nTo obtain this expression, we need to calculate the exponential decay constants \\(\\lambda\\), which are the eigenvalues of the system.\nHowever, this equation does not account for infusion, it describes the clearance from plasma starting from an initial value \\(B\\).\nIf we want to solve the ODE system while taking into account the infusion term \\(J\\), the equation becomes more complicated3,4. This equation introduces coefficients \\(c_{ji}\\) which are outlined below.\n\\(Cc = \\sum_{n} B_n e^{-\\lambda_n dt} + c_{pn} J (1 - e^{-\\lambda_n dt})\\)\nThe equation can also be written for the effect site concentration:\n\\(Ce = \\sum_{n} B_n e^{-\\lambda_n dt} + c_{en} J (1 - e^{-\\lambda_n dt})\\)\nIn this case, the vector B contains a fourth term for the effect compartment, \\(k_{e0}\\) is added as a fourth term to \\(\\lambda\\) and different coefficients \\(c_e\\) are used.\nThese formulas are valid for constant infusion rate \\(J\\). If the infusion rate is changed, the solution can be calculated up to the last value during the previous infusion rate and this solution can be used as an initial state \\(B\\) in the new formula with new rate constant.\n\nPharmacokinetic Coefficient\nThis is the most frustrating part for me. I copied these coefficients from STANPUMP, but I don’t understand how to derive them mathematically. According to the literature, the derivation involves several complex steps: applying the Laplace transform3 to Equation 1, performing calculations in the Laplace domain, simplifying the expression using partial fraction decomposition, and then applying the inverse Laplace transform. Unfortunately, this level of mathematics is beyond my current understanding. I would be grateful if someone could explain how these coefficients are actually derived.\n\nThree Compartment Model\n\\[\n\\begin{equation}\n\\begin{aligned}\nc_{p1} & = \\frac{(k_{21} - \\lambda_1)(k_{31} - \\lambda_1)}{(\\lambda_1 - \\lambda_2)(\\lambda_1 - \\lambda_3) \\cdot V_c \\cdot \\lambda_1}\n\\\\\nc_{p2} & = \\frac{(k_{21} - \\lambda_2)(k_{31} - \\lambda_2)}{(\\lambda_2 - \\lambda_1)(\\lambda_2 - \\lambda_3) \\cdot V_c \\cdot \\lambda_2}\n\\\\\nc_{p3} & = \\frac{(k_{21} - \\lambda_3)(k_{31} - \\lambda_3)}{(\\lambda_3 - \\lambda_2)(\\lambda_3 - \\lambda_1) \\cdot V_c \\cdot \\lambda_3}\n\\\\\nc_{e1} & = c_{p1} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_1}\n\\\\\nc_{e2} & = c_{p2} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_2}\n\\\\\nc_{e3} & = c_{p3} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_3}\n\\\\\nc_{e4} & = \\frac{(k_{e0} - k_{21})(k_{e0} - k_{31})}{(\\lambda_1 - k_{e0})(\\lambda_2 - k_{e0})(\\lambda_3 - k_{e0}) \\cdot V_c}\n\\end{aligned}\n\\end{equation}\n\\]\n\n\nTwo Compartment Model\n\\[\n\\begin{equation}\n\\begin{aligned}\nc_{p1} & = \\frac{k_{21} - \\lambda_1}{(\\lambda_2 - \\lambda_1) \\cdot V_c \\cdot \\lambda_1}\n\\\\\nc_{p2} & = \\frac{k_{21} - \\lambda_2}{(\\lambda_1 - \\lambda_2) \\cdot V_c \\cdot \\lambda_2}\n\\\\\nc_{e1} & = c_{p1} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_1}\n\\\\\nc_{e2} & = c_{p2} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_2}\n\\\\\nc_{e3} & = \\frac{k_{21} - k_{e0}}{(\\lambda_1 - k_{e0})(\\lambda_2 - k_{e0}) \\cdot V_c}\n\\end{aligned}\n\\end{equation}\n\\]\n\n\nOne Compartment Model\n\\[\n\\begin{equation}\n\\begin{aligned}\nc_{p1} & = \\frac{1}{\\lambda_1 \\cdot V_c}\n\\\\\nc_{p2} & = c_{p1} \\cdot \\frac{k_{e0}}{k_{e0} - \\lambda_1}\n\\\\\nc_{e1} & = \\frac{1}{(\\lambda_1 - k_{e0}) \\cdot V_c}\n\\end{aligned}\n\\end{equation}\n\\]"
  },
  {
    "objectID": "posts/202508_stanpump/index.html#source-code",
    "href": "posts/202508_stanpump/index.html#source-code",
    "title": "Deep dive into STANPUMP",
    "section": "Source code",
    "text": "Source code\nSteven L. Shafer, one of the pioneers of TCI, wrote the original STANPUMP source code. From the beginning, Shafer intended for this software to be open source—a valuable contribution to the community. Later, Charles Minto established the Open TCI website, which serves as a repository for models and software related to PKPD and TCI. The latest version of STANPUMP is available at: https://opentci.org/code/stanpump.\n\n16-bit real mode MSDOS\nSTANPUMP was written for the MSDOS operating system, running on x86 systems in “real mode”. In real mode, program address physical memory directly with a maximum of 1 MB adressable memory. There is no memory protection and any memory location can be read and written by any program. The program interacts directly with the hardware through interrupts. This can for example be seen in the STANPUMP code which interacts with the keyboard or renders text on the screen.\n#define INT09   0x0009      /* Keyboard interrupt number           */\n#define INT1B   0x001B      /* Ctrl-C interrupt number             */\n#define INT23   0x0023      /* Ctrl-Break interrupt number         */\n\nvoid set_keyboard()\n    {\n       OldInt09 = _dos_getvect( INT09 );\n       OldInt1B = _dos_getvect( INT1B );\n       OldInt23 = _dos_getvect( INT23 );\n\n       KbdPtr = Int09;\n       _dos_setvect( INT09, KbdPtr );\n\n       BrkPtr = Int1B;\n       _dos_setvect( INT1B, BrkPtr);\n\n       BrkPtr = Int23;\n       _dos_setvect( INT23, BrkPtr );\n\n       KbdCtrl  = (ADDRESS) KBDFLAG;\n       keyboard_reset = 1;\n    }\n\nvoid gotoxy(x, y)\nint x, y;\n    {                   /* gotoxy */\n    REGS ir, or;\n    ir.h.dh = y;\n    ir.h.dl = x;\n    ir.h.ah = 2;\n    ir.h.bh = 0;\n    int86(0x10, &ir, &or);\n    }                   /* gotoxy */\n\n\nK&R vs. ANSI C\nSTANPUMP was written in the now obsolete K&R style which was published in 1978 by Brian Kernighan and Dennis Ritchie.\nThis is mostly visible in the function prototypes, for example:\nvoid cube(k10,k12,k21,k13,k31,r)\ndouble k10, k12, k21, k13, k31;\ndouble *r;\n    {                   /* cube */\n    /* function code */\n    }                   /* cube */\nThis is the modern ANSI C equivalent of this prototype:\nvoid cube(double k10, double k12, double k21, double k13, double k31, double *r);\n\n\nMemory allocations\nSTANPUMP was designed to run on systems with severe memory constraints. The developers avoided heap allocation because it was unreliable on MS-DOS systems. Instead, they statically allocated all variables and shared program state through global variables. While global variables are discouraged in modern programming because they make it difficult to track program state and predict how functions interact, this approach was practical given the hardware limitations of the time. Despite these constraints, STANPUMP’s developers made several clever design choices to minimize memory and CPU usage. Their deep understanding of the underlying algorithms allowed them to precalculate certain values for later reuse, demonstrating sophisticated optimization techniques. One notable example is their introduction of “unit disposition functions” (UDFs).\n/* calculate udf, plasma concentration, for an infusion of 1/second */\np_udf[0] = 0;\nfor (i = 1;  i &lt; 199;  i++)\n    {\n    temp1 = temp1 * l1 + p_coef[1] * (1 - l1);\n    temp2 = temp2 * l2 + p_coef[2] * (1 - l2);\n    temp3 = temp3 * l3 + p_coef[3] * (1 - l3);\n    p_udf[i] = temp1 + temp2 + temp3;\n    }\nUDFs represent the step response of the model and are calculated for both plasma concentration and effect site concentration. They show how the model responds to a constant infusion of 1 unit of drug per second. This calculation is performed once and stored in memory, then the response vector can be scaled according to the actual infusion rate.\n\n\nCalculation of Eigenvalues\nSTANPUMP uses closed-form solutions of the PKPD differential equations to improve calculation efficiency. These solutions have been derived and published by the authors and others3,4. To obtain these equations, the eigenvalues of the PKPD model must be calculated. In the early 1990s, mathematics libraries for eigenvalue calculations were not widely available, so the developers had to implement this manually. This calculation is handled in the CUBE.C source file. The process begins by calculating the determinant of the system matrix and expressing it as a depressed cubic equation: x³ + px + q = 0. Since off-the-shelf cubic equation solvers weren’t available in C during the 1990s, the authors implemented Girolamo Cardano’s 16th-century trigonometric solution to solve this equation and derive the eigenvalues. This approach was practical because trigonometric functions had been part of the C standard library since 1978 and were extended in 1989.\nvoid cube(k10,k12,k21,k13,k31,r)\ndouble k10, k12, k21, k13, k31;\ndouble *r;\n    {                   /* cube */\n    double a0, a1, a2;  /* factors in cubic equation */\n    double p, q;        /* factors in transformed equation */\n    double phi;         /* used for root solving */\n    double r1;          /* also used for root solving */\n    double toradian;    /* mathematical conversion from degrees to radians */\n\n    toradian = asin(1.0) * 2.0 / 180.0; /* pi/180 */\n\n    if (k31 &gt; 0)\n        {\n        /* first take roots of X^3 + a2X^2 + a1X^1 + a0 = 0 */\n        /* where the coefficients are : */\n        a0 = k10 * k21 * k31;\n        a1 = k10 * k31 + k21 * k31 + k21 * k13 + k10 * k21 + k31 * k12;\n        a2 = k10 + k12 + k13 + k21 + k31;\n\n        /* now transform to x^3 + px + q = 0 */\n        p = a1 - (a2 * a2 / 3.0);\n        q = (2 * a2 * a2 * a2 / 27.0) - (a1 * a2 / 3.0) + a0;\n        r1 = sqrt(-(p * p * p) / 27.0);\n        phi = (-q / 2.0) / r1;\n        if (phi &gt; 1)\n            phi = 1;\n        else if (phi &lt; -1)\n            phi = -1;\n        phi = (acos(phi) / 3.0);\n        r1 = 2.0 * exp(log(r1) / 3.0);\n        r[1] = -(cos(phi) * r1 - a2 / 3.0);\n        r[2] = -(cos(phi + 120.0 * toradian) * r1 - a2 / 3.0);\n        r[3] = -(cos(phi + 240.0 * toradian) * r1 - a2 / 3.0);\n        }\n    else\n        {\n        if (k21 &gt; 0)\n            {\n            /* first take roots of X^2 - a1X^1 + a0 = 0 */\n            /* where the coefficients are : */\n            a0 = k10 * k21;\n            a1 = -(k10 + k12 + k21);\n            r[1] = (-a1 + sqrt(a1 * a1 - 4 * a0)) / 2;\n            r[2] = (-a1 - sqrt(a1 * a1 - 4 * a0)) / 2;\n            r[3] = 0;\n            }\n        else\n            {\n            /* one compartment model */\n            r[1] = k10;\n            r[2] = 0;\n            r[3] = 0;\n            }\n        }\n\n    /* sort - nothing fancy is needed */\n    if (r[2] &gt; r[1])\n        swap(&r[2], &r[1]);\n    if (r[3] &gt; r[1])\n        swap(&r[3], &r[1]);\n    if (r[3] &gt; r[2])\n        swap(&r[3], &r[2]);\n    }                   /* cube */\n\n\nCore algorithm\nTo study the algorithm, I extracted the core functions, converted them to ANSI C, and created a minimal C program to run the algorithm. The source code for this project is available at: https://framagit.org/jaj/ministan/-/tree/main/c.\nI considered it essential to run the original STANPUMP code as a reference implementation. When algorithms are re-implemented, small errors can easily creep in and may be difficult to detect. Using the original STANPUMP as a control allows us to verify that our code produces correct output. In my adaptation, I moved all global variables into a struct called Config to serve as a centralized state container.\n/* cube.c */\nvoid cube(double k10, double k12, double k21, double k13, double k31,\n          double *r);\n\n/* udfs.c */\nvoid calculate_udfs(Config *cfg);\n\n/* virtual_model.c */\ndouble virtual_model(Config *cfg, double vm1, double vm2, double vm3,\n                     double vm4, int t, int flag);\n\n/* find_peak.c */\nint find_peak(Config *cfg, int current_time, double rate, double temp1e,\n              double temp2e, double temp3e, double temp4e);\n\n/* model.c */\ndouble model(Config *cfg, double temp1, double temp2, double temp3,\n             double temp1e, double temp2e, double temp3e, double temp4e,\n             double desired);\nThe cube() function was already discussed above. It calculates eigenvalues of the PK system which are widely used later in the code.\nThe calculate_udfs() function calculates the “unit disposition functions” (UDF). A ten second infusion is simulated at constant (unit) rate. Then the model is run until the model is run without infusion to see when the concentration peaks (peak_time). The peak_time (also called time to peak effect TTPE) is a caracteristic of the model. It is used later in the model() function. The calculate_udfs() function also calculates the \\(c_p\\) and \\(c_e\\) coefficients.\nThe virtual_model() function runs the model without infusion rate for a specified time. This is useful to estimate where the concentrations are heading and to evaluate how rate needs to be adjusted.\nfind_peak() is a hill climbing algorithm to find out when concentration will peak given the current infusion rate.\nThe model() function is the main function of the algorithm. It orchestrates the other functions to find the optimal infusion rate for the given target."
  },
  {
    "objectID": "posts/202508_stanpump/index.html#reimplementation-in-python",
    "href": "posts/202508_stanpump/index.html#reimplementation-in-python",
    "title": "Deep dive into STANPUMP",
    "section": "Reimplementation in Python",
    "text": "Reimplementation in Python\nSTANPUMP represents a remarkable combination of deep TCI algorithm knowledge and programming expertise. The authors derived mathematical solutions themselves to optimize performance and employed coding techniques that enabled real-time execution on very basic hardware. With over 10 years of clinical use, the software’s algorithms are thoroughly proven in practice. To experiment with the code and test it with my own models, I decided to reimplement it in Python. I began with a 1:1 translation of the C code, then gradually modernized sections using contemporary approaches like array programming with NumPy5.\nFor example, the calculation of the eigenvalues is straightforward with NumPy:\n\nimport numpy as np\nA = [\n    [-(k10 + k12 + k13), k21, k31],\n    [k12, -k21, 0],\n    [k13, 0, -k31],\n]\nlambdas = np.linalg.eigvals(A)\n\nSome algorithms could probably be replaced by highly optimized functions from the SciPy library6, such as the local maximum algorithms. There is still work to be done in this space.\nThe current version of the code can be found here: https://framagit.org/jaj/ministan/-/blob/main/python/tci.py\nHere is an example code of a simulation of the Gepts Sufentanil model7:\nhttps://framagit.org/jaj/ministan/-/blob/main/python/sim_gepts.py\nThe code calculates infusion rates for three different effect site targets and determines the resulting plasma and effect site concentrations for each rate. To validate these results, the code also solves the differential equations directly, providing an independent calculation method alongside the closed-form solutions.\n\nThe code could be coupled to a syringe pump control library such as InfuPy8 to drive syringe pumps with the calculated rates. Of course this can only be used for research purposes and under no circumstances on real patients. See https://www.demed.be/Rugloop%20&%20TCI%20news.htm#Background for more information on this topic."
  },
  {
    "objectID": "posts/202508_stanpump/index.html#emulation",
    "href": "posts/202508_stanpump/index.html#emulation",
    "title": "Deep dive into STANPUMP",
    "section": "Emulation",
    "text": "Emulation\nSTANPUMP can still be run today on modern hardware using FreeDOS, an open source reimplementation of MS-DOS. I have briefly tested that the STANPUMP binary obtained from OpenTCI runs with FreeDOS in the Qemu emulator. Running the real STANPUMP program in emulation and comparing the calculated infusion rates can provide an additional layer of validation of the algorithms.\n\nHere is an example screen with the Gepts model running:"
  },
  {
    "objectID": "posts/202508_stanpump/index.html#references",
    "href": "posts/202508_stanpump/index.html#references",
    "title": "Deep dive into STANPUMP",
    "section": "References",
    "text": "References\n\n\n1. Struys MMRF, De Smet T, Glen J(Iain)B, Vereecke HEM, Absalom AR, Schnider TW. The History of Target-Controlled Infusion. Anesthesia & Analgesia [Internet] 2016 [cited 2025 Aug 19]; 122: 56–69 Available from: https://journals.lww.com/00000539-201601000-00015\n\n\n2. Fidler M, Wilkins J, Hooijmaijers R, et al. Nonlinear mixed-effects model development and simulation using nlmixr and related r open-source packages. CPT: Pharmacometrics & Systems Pharmacology [Internet] Hoboken: John Wiley; Sons Inc.; 2019; 8: 621–33 Available from: https://doi.org/10.1002/psp4.12445\n\n\n3. Shafer SL, Gregg KM. Algorithms to rapidly achieve and maintain stable drug concentrations at the site of drug effect with a computer-controlled infusion pump. Journal of Pharmacokinetics and Biopharmaceutics [Internet] 1992 [cited 2025 Aug 19]; 20: 147–69 Available from: http://link.springer.com/10.1007/BF01070999\n\n\n4. Bailey JM, Shafer SL. A simple analytical solution to the three-compartment pharmacokinetic model suitable for computer-controlled infusion pumps. IEEE transactions on bio-medical engineering 1991; 38: 522–5 \n\n\n5. Harris CR, Millman KJ, Walt SJ van der, et al. Array programming with NumPy. Nature [Internet] Springer Science; Business Media LLC; 2020; 585: 357–62 Available from: https://doi.org/10.1038/s41586-020-2649-2\n\n\n6. Virtanen P, Gommers R, Oliphant TE, et al. SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python. Nature Methods 2020; 17: 261–72 \n\n\n7. Gepts E, Shafer SL, Camu F, et al. Linearity of Pharmacokinetics and Model Estimation of Sufentanil. Anesthesiology [Internet] 1995 [cited 2025 Aug 23]; 83: 1194–204 Available from: https://journals.lww.com/00000542-199512000-00010\n\n\n8. Joachim J. InfuPy [Internet]. Zenodo; 2021 [cited 2021 Aug 16]. Available from: https://zenodo.org/record/5208192"
  },
  {
    "objectID": "posts/201004_gps/index.html",
    "href": "posts/201004_gps/index.html",
    "title": "Neo Freerunner GPS as OpenBSD timedelta sensor",
    "section": "",
    "text": "I recently discovered the nmea(4) serial line discipline in OpenBSD which was written by Marc Balmer in 2008. This is a driver that can be attached to a serial device and which interprets NMEA 0183 data typically produced by GPS devices. It extracts time data (not position) from the GPS stream and makes it available through the OpenBSD sensors framework. This timedelta sensor can then be used by OpenNTPD to keep your clock in sync. Now I have a Neo Freerunner smartphone which comes with a GPS device that produces NMEA data and I wanted to test it out.\nFirst of all on the phone side you have to power on the GPS device, for example like this:\necho 1 &gt; /sys/class/i2c-adapter/i2c-0/0-0073/pcf50633-regltr.7/neo1973-pm-gps.0/power_on\nThen you need to transfer the GPS data from the phone to your OpenBSD machine and emulate a serial device that provides the data.\nsocat (net/socat) does a great job at this. On the phone side make sure GPSD is running and do something like the this:\nsocat EXEC:\"gpspipe -r\" TCP-LISTEN:31415\nalternatively you can talk to the raw device without GPSD like that:\nsocat /dev/ttySAC1,raw,echo=0,crnl TCP-LISTEN:31415\nNow on the computer side you need to attach this to a pseudo terminal:\nsocat TCP:192.168.0.14:31415 /dev/ptypa,raw,echo=0,crnl\nYou should now be able to query the GPS device on your computer. Attach the nmea(4) discipline to the serial device using:\nldattach nmea /dev/ttypa\nIf everything worked fine you should see an nmea sensor come up which you can query using sysctl or systat for example.\nHere’s my relevant output from systat:\nSENSOR                                          VALUE  STATUS  DESCRIPTION\nnmea0.percent0                                100.00%    OK    Signal\nnmea0.timedelta0                              2.237 s    OK    GPS autonomous\nTo use this sensor with OpenNTPD you simply need to add the following to /etc/ntpd.conf:\nsensor nmea0\nntpd is opportunistic about the timedelta sensors, meaning it will use them when they are available but will run just as smooth when they are not.\nHere’s some ntpd output:\nsensor nmea0 added (weight 1, correction 0.000000, refstr HARD)\nsensor nmea0: offset -2.236736\nI advise you to read the relevant man pages to get a better understanding of the process."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Deep dive into STANPUMP\n\n\n\npharmacometrics\n\ntci\n\n\n\n\n\n\n\n\n\nAug 24, 2025\n\n\nJona JOACHIM\n\n\n\n\n\n\n\n\n\n\n\n\nRFLink 433 MHz RF Gateway\n\n\n\nrf\n\narduino\n\npcb\n\nkicad\n\n\n\n\n\n\n\n\n\nNov 29, 2019\n\n\nJona\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the Nokia 6510 GSM modem over IrDA\n\n\n\nunix\n\n\n\n\n\n\n\n\n\nFeb 7, 2011\n\n\nJona JOACHIM\n\n\n\n\n\n\n\n\n\n\n\n\nNeo Freerunner GPS as OpenBSD timedelta sensor\n\n\n\nunix\n\n\n\n\n\n\n\n\n\nApr 26, 2010\n\n\nJona JOACHIM\n\n\n\n\n\n\n\n\n\n\n\n\nxterm, zsh, spawn-new-terminal, *BSD\n\n\n\nunix\n\n\n\n\n\n\n\n\n\nFeb 10, 2010\n\n\nJona JOACHIM\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/201911_rflink/index.html",
    "href": "posts/201911_rflink/index.html",
    "title": "RFLink 433 MHz RF Gateway",
    "section": "",
    "text": "In this blog post I would like to share my custom RFLink gateway built on top of the RobotDyn Mega 2560 PRO board. You can see the Mega 2560 PRO as an Arduino Mega clone using a more efficient board layout in order to achieve a smaller board size while still exposing all the relevant features of the microcontroller.\nI designed a daughter board using KiCAD with the instructions from the RFLink website in order to place the RF parts. I used the Aurel RTX MID 5v transceiver which is recommended by the RFLink team. The fact that it contains receiver and transmitter on the same board simplifies the wiring and enables you to use only one antenna. You could however use any other 433 Mhz RF TX/RX components as described on the site.\nHere is the full component list for this project:\n\nMEGA 2560 PRO Board\nCustom PCB\n100nF ceramic capacitor\n10k resistor\nBi-directional logic level converter\nSMA edge connector\n433 Mhz SMA antenna\n\nThe MEGA 2560 PRO board uses 3.3V logic levels internally and is not compatible with 5V logic, even though it is powered from 5V USB. It has an on-board LDO converter which provides 3.3V. This means it is not possible to directly hook up the Aurel RTX MID 5v transceiver which works on 5V. I added a bi-directional logic level converter to the design for this reason, in order to be able to get the devices to talk to each other. When looking around on the Internet, I saw that there is actually a 3.3V version of the Aurel RTX MID (called Aurel RTX MID 3v), which you could hook up directly. However, the 3.3V version appears to be even more difficult to find from resellers than the 5V version, so I went with the 5V version.\nIn order to program the Mega board, I used an AVR programmer. I went for the AVRISP mkII. I don’t think this should be necessary since the board should come preflashed with the Arduino bootloader and you should be able to flash it directly over USB. Mine did not have an Arduino bootloader but this can be due to the fact that I tinkered with it in the past.\nYou need to download the RFLink firmware and extract the RFLink.cpp.hex file which contains the actual binary firmware. (Note that RFLink is not an open source project. The source code for the firmware is not available. They do provide the source code for an old version of the firmware though).\nAfter you extracted the firmware, you can flash it directly over USB using the following command:\navrdude -p atmega2560 -c stk500v2 -P /dev/ttyUSBx -b 115200 -D -Uflash:w:RFLink.cpp.hex:i   \nor you can use the AVRISP mkII programmer using this command:\navrdude -p atmega2560 -c avrispmkII -D -U flash:w:RFLink.cpp.hex:i\nIf you run on Windows, you can also use the GUI tool provided in the firmware archive.\nMy KiCAD project for the daughter board is available here : https://framagit.org/jaj/rflink-gateway.\nYou can order the PCB directly from OSH Park here: https://oshpark.com/shared_projects/cp3NoWn5.\nMost parts and devices listed above can be found very cheap from Chinese resellers.\nAfter you completed the board, it is possible to hook it up to home automation software over USB. At my place, I use it together with Home Assistant and a Raspberry Pi in order to control smart sockets.\nHere is a view of the fully assembled board. Maybe at some point I will design a box for it.\nUpdate August 2025: it’s been running flawlessly for 6 years. I haven’t designed a box yet.\n\nLinks:\n\nhttps://robotdyn.com/catalog/arduino/boards/matrix-led-8x8-module-32x32mm-driver-max7219-7221.html\nhttp://www.rflink.nl/blog2/wiring\nhttps://www.sparkfun.com/products/12009\nhttps://oshpark.com/shared_projects/cp3NoWn5\nhttps://framagit.org/jaj/rflink-gateway"
  },
  {
    "objectID": "posts/201002_zsh/index.html",
    "href": "posts/201002_zsh/index.html",
    "title": "xterm, zsh, spawn-new-terminal, *BSD",
    "section": "",
    "text": "xterm defines a very convenient action called spawn-new-terminal(). Using that action you can duplicate your current terminal and obtain a shell in your current working directory even if you’re inside a program like vim or mutt.\nFrom the man page:\n   spawn-new-terminal(params)\n           Spawn  a  new xterm process.  This is available on\n           systems which have a modern version of the process\n           filesystem, e.g., \"/proc\", which xterm can read.\n\n           Use the \"cwd\" process entry, e.g., /proc/12345/cwd\n           to obtain the working  directory  of  the  process\n           which is running in the current xterm.\nYou can bind this action to a key using Xresources. For example I bind the action to Alt-n. Here’s the relevant part from my .Xdefaults:\nxterm*VT100.translations: #override \\n\\\n        Meta &lt;Key&gt;n:spawn-new-terminal()\nThe problem is that on *BSD you don’t have a procfs, at least not one that looks like the one on Linux.\nSo to actually get this working, xterm needs another way to find out the current working directory (CWD) of the shell that runs inside of it. I found out that this is not so easy and after some tinkering I decided to go for a dirty hack. The idea is, if I can’t find out the cwd of a zsh process on my own then perhaps I can ask zsh gently to tell it.\nZsh, like any other shell, lets you define functions, however certain functions have a special meaning for zsh: they define hooks. We use 2 hooks here: chpwd(), called whenever the CWD of zsh changes, and zshexit(), called when the shell quits.\nHere are the relevant parts from my .zshrc:\nfunction chpwd()\n{\n    echo -n ${PWD} &gt; ${HOME}/.zsh/${PPID}.pwd\n}\n#call chpwd once on startup\nchpwd\n\nfunction zshexit()\n{\n    rm ${HOME}/.zsh/${PPID}.pwd\n}\nNow for the xterm part. The relevant function is HandleSpawnTerminal() in misc.c. Here’s my modified version:\n#include &lt;sys/types.h&gt;\n#include &lt;pwd.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;err.h&gt;\n\n/* ARGSUSED */\nvoid\nHandleSpawnTerminal(Widget w GCC_UNUSED,\n            XEvent * event GCC_UNUSED,\n            String * params,\n            Cardinal *nparams)\n{\n    static char zshdir[] = \".zsh\";\n    static char termpath[] = \"xterm\";\n\n    pid_t pid, forkpid;\n    uid_t uid;\n    struct passwd *passwd;\n\n    char pathname[_POSIX_PATH_MAX];\n    char zshcwd[_POSIX_PATH_MAX];\n\n    char *home;\n    FILE *fp;\n\n    pid = getpid();\n\n    uid = geteuid();\n    passwd = getpwuid(uid);\n    home = passwd-&gt;pw_dir;\n\n    snprintf(pathname, sizeof pathname, \"%s/%s/%ld.pwd\", home, zshdir, (long)pid);\n\n    fp = fopen(pathname, \"r\");\n    if(fp == NULL)\n    {\n        warn(\"couldn't open %s\", pathname);\n        return;\n    }\n    if(fgets(zshcwd, sizeof zshcwd, fp) == NULL)\n    {\n        warn(\"couldn't read from %s\", pathname);\n        fclose(fp);\n        return;\n    }\n\n    fclose(fp);\n\n    /* The reaper will take care of cleaning up the child */\n    forkpid = fork();\n    if(forkpid &lt; 0)\n    {\n        warn(\"Could not fork\");\n        return;\n    }\n    if(forkpid == 0)\n    {\n        /* We are the child */\n        if(chdir(zshcwd) &lt; 0)\n            err(1, \"could not chdir to %s\", zshcwd);\n\n        unsigned myargc = *nparams + 1;\n        char **myargv = TypeMallocN(char *, myargc + 1);\n        unsigned n = 0;\n\n        myargv[n++] = termpath;\n\n        while (n &lt; myargc) {\n            myargv[n++] = *params++;\n        }\n\n        myargv[n] = 0;\n        execvp(termpath, myargv);\n\n        /* If we get here, we've failed */\n        err(1, \"exec of '%s'\", termpath);\n    } else {\n        /* We are the parent\n         * we just live our life */\n    }\n}\nNow you just have to reconfigure xterm with –enable-exec-xterm and build it."
  },
  {
    "objectID": "posts/201107_gprs/index.html",
    "href": "posts/201107_gprs/index.html",
    "title": "Using the Nokia 6510 GSM modem over IrDA",
    "section": "",
    "text": "So it looks like everybody has a smartphone nowadays, however I still use my Nokia 6510 on a daily basis. Like many phones back then, it has an IrDA (Infrared Data Association) interface which permits communication with the phone and I felt like playing with it a bit. For this I used a laptop with integrated IrDA interface, the OpenBSD operating system and the ppp tool that ships with it, the birda package and the smstools package. The ircomm tool that ships with birda lets you initiate an IrDA COMM connection with the phone and lets you attach a pseudo terminal to it:\nircomm -d /dev/tty01 -y /dev/ptypz\nHere, /dev/tty01 is the actual IrDA interface that ircomm talks to and /dev/ptypz is a pseudo terminal it allocates that lets you talk to the GSM modem inside the device. The modem understands AT style commands. Actually you don’t talk directy to the modem but rather to some restricted modem emulation.\nFor more information see:\n\nhttp://en.wikipedia.org/wiki/Hayes_command_set#GSM\nhttp://wiki.openmoko.org/wiki/Hardware:AT_Commands\nhttp://wiki.openmoko.org/wiki/Manually_using_GSM\nhttp://wiki.openmoko.org/wiki/Manually_using_GPRS\n\nI use the ppp(8) tool to talk to the modem but anything else will work. Here’s a first session:\nspaceman% sudo ppp\nPassword:\nWorking in interactive mode\nUsing interface: tun0\nWarning: No default entry found in config file.\nppp ON spaceman&gt; set device /dev/ttypz\nppp ON spaceman&gt; term\ndeflink: Entering terminal mode on /dev/ttypz\nType `~?' for help\nATE1\nOK\n\nRING\n\nRING\nATA\nOK\nATH\nOK\nATD0952880000;\nOK\n\nNO CARRIER\nAT\nOK\n\nppp ON spaceman&gt;\nSome explanations: “ATE1” enables echoing, which enables you to see what you type, this is not required. The phone responds with “OK” when it correctly processes a command. I then call the phone and the modem shows that a call is incoming with the “RING” signal. You can then accept the call with “ATA” or reject it with “ATH”. I accepted the call, talked a bit and then hung up using “ATH”. Then I called my home phone from the mobile phone using the ATD command. ‘D’ here stands for dialling and the command dials the number that follows the command. I then hung up from the home phone which the modem signals with “NO CARRIER”.\nHere’s another session where I try to establish a GPRS connection for tethering. This unfortunately doesn’t work, I don’t really know why, probably the provider forbids it:\nppp ON spaceman&gt; term\nAT+CGDCONT=1,\"IP\",\"gprs-service-fr.net\"\nOK\nATD*99#\nCONNECT\nppp ON spaceman&gt; Warning: Sending empty PAP authname!\nPpp ON spaceman&gt;\nPPp ON spaceman&gt; Warning: ff01:8::: Change route failed: errno: Network is unreachable\nWarning: ff02:8::: Change route failed: errno: Network is unreachable\nWarning: ff02:8::: Change route failed: errno: Network is unreachable\nppp ON spaceman&gt;\nSo here I first set the APN which is needed for GPRS, using the CGDCONT command, the value depends on your provider. Then I dial the special number *99#. The modem tries to establish the connection, which it signals with “CONNECT”. It then starts talking PPP (Point-to-Point Protocol). The ppp(8) tool detects the fact that PPP is now spoken and takes over to establish a PPP link, which unfortunately fails here. The number of capital ’P’s on the prompt show the state of the connection:\nppp ON awfulhak&gt;               # No link has been established\nPpp ON awfulhak&gt;               # We've connected & finished LCP\nPPp ON awfulhak&gt;               # We've authenticated\nPPP ON awfulhak&gt;               # We've agreed IP numbers\nSo, as you can see here, authentication is successful but we don’t get an IP address. When it fails, the phone beeps and shows the following error: “Subscribe to GPRS first”.\nOne final thing I wanted to play with is SMS. Writing SMSes manually using AT style commands is cumbersome, so I used the smstools package which comes with a daemon that does the dirty work of talking to the modem. I set it up to talk to the /dev/ptypz device. Once it runs you can send SMSes using the “sendsms” command line tool, for example:\nspaceman% sendsms 33668360000 'Test Message'\nMy phone number actually starts in “0668”. “33” is the international prefix of my country (France), so you get how you have to format the number.\nHere is the log of the smsd daemon for this command:\n2011-02-07 17:06:58,5, smsd: Moved file /var/spool/sms/outgoing/send_qzxMhS to /var/spool/sms/checked\n2011-02-07 17:06:58,6, GSM1: I have to send 1 short message for /var/spool/sms/checked/send_qzxMhS\n2011-02-07 17:06:58,6, GSM1: Sending SMS from  to 33668360000\n2011-02-07 17:06:58,6, GSM1: Checking if modem is ready\n2011-02-07 17:06:59,7, GSM1: -&gt; AT\n2011-02-07 17:06:59,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:06:59,7, GSM1: &lt;- OK\n2011-02-07 17:06:59,6, GSM1: Pre-initializing modem\n2011-02-07 17:06:59,7, GSM1: -&gt; ATE0+CMEE=1;+CREG=2\n2011-02-07 17:07:00,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:00,7, GSM1: &lt;- OK\n2011-02-07 17:07:01,7, GSM1: -&gt; AT+CSQ\n2011-02-07 17:07:01,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:01,7, GSM1: &lt;- +CSQ: 20,99 OK\n2011-02-07 17:07:01,6, GSM1: Signal Strength Indicator: (20,99) -73 dBm (Excellent), Bit Error Rate: not known or not detectable\n2011-02-07 17:07:01,6, GSM1: Checking if Modem is registered to the network\n2011-02-07 17:07:01,7, GSM1: -&gt; AT+CREG?\n2011-02-07 17:07:02,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:02,7, GSM1: &lt;- +CREG: 2,1,\"00D6\",\"9C99\" OK\n2011-02-07 17:07:02,6, GSM1: Modem is registered to the network\n2011-02-07 17:07:02,6, GSM1: Selecting PDU mode\n2011-02-07 17:07:02,7, GSM1: -&gt; AT+CMGF=0\n2011-02-07 17:07:03,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:03,7, GSM1: &lt;- OK\n2011-02-07 17:07:03,7, GSM1: -&gt; AT+CMGS=18\n2011-02-07 17:07:04,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:04,7, GSM1: &lt;- &gt;\n2011-02-07 17:07:04,7, GSM1: -&gt; 0011000B913366388639F90000FF04F4F29C0E\n2011-02-07 17:07:06,7, GSM1: Command is sent, waiting for the answer\n2011-02-07 17:07:10,7, GSM1: &lt;- +CMGS: 214 OK\n2011-02-07 17:07:10,5, GSM1: SMS sent, Message_id: 214, To: 33668360000, sending time 12 sec.\n2011-02-07 17:07:10,6, GSM1: Deleted file /var/spool/sms/checked/send_qzxMhS\nThe message got delivered correctly. smsd is also able to receive incoming SMS, however I haven’t tried it and I’m not sure it works since the modem of this phone does not signal anything when it receives a message.\nThe birda package also includes some tools to use OBEX over IrDA. This lets you send and receive vCards with contacts (what Nokia calls “Business Cards”). For example, to send a vCard with a contact named “John” and phone number 06… to your phone you can use the following command:\nmkobextel -n John -t 0668360001 |  irobex -d /dev/tty01\nReceiving vCards sent from the phone also works.\nHave fun!\nUpdate: I just add this here for the nostalgia\nAT+CGMI\nNokia Mobile Phones\n\nOK\nAT+CGMM\nNokia 6510\n\nOK\nAT+CGMR\nV 04.12\n28-08-02\nNPM-9\n(c) NMP.\n\nOK"
  }
]